swagger: "2.0"
info:
  description: "This is a sample homework8 server.  You can find \nout more about\
    \ Swagger at \n[http://swagger.io](http://swagger.io) or on \n[irc.freenode.net,\
    \ #swagger](http://swagger.io/irc/).\n"
  version: 1.0.0
  title: Swagger HW8
  termsOfService: http://swagger.io/terms/
  contact:
    email: evgeny_kuznetsov@epam.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:10010
basePath: /
tags:
- name: city
  description:  Operations about cities
- name: product
  description: Operations about products
- name: user
  description: Operations about users
schemes:
- https
- http
paths:
  /api/users:
    get:
      tags:
      - user
      summary: Finds users
      description: Multiple status values can be provided with comma separated strings
      operationId: getAllProductsUsers
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Invalid status value
  /api/users/{id}:
    delete:
      tags:
      - user
      summary: Deletes a user
      operationId: deleteUser
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: user id to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: user not found
  /api/products:
    get:
      tags:
      - product
      summary: Finds products
      description: Multiple status values can be provided with comma separated strings
      operationId: getAllProducts
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        400:
          description: Invalid status value
    post:
      tags:
      - product
      summary: Add a new product to the store
      operationId: addProduct
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Product object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        405:
          description: Invalid input
  /api/products/{id}:
    get:
      tags:
      - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of city to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Product'
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
    put:
      tags:
      - product
      summary: Update an existing product
      operationId: updateProduct
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of product to return
        required: true
        type: string
      - in: body
        name: body
        description: Product object that needs to be updated to the store
        required: true
        schema:
          $ref: '#/definitions/Product'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
        405:
          description: Validation exception
    delete:
      tags:
      - product
      summary: Deletes a product
      operationId: deleteProduct
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: product id to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
  /api/cities:
    get:
      tags:
      - city
      summary: Finds cities
      description: Multiple status values can be provided with comma separated strings
      operationId: getAllCities
      produces:
      - application/json
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        type: array
        items:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
        collectionFormat: multi
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/City'
        400:
          description: Invalid status value
    post:
      tags:
      - city
      summary: Add a new city to the store
      operationId: addCity
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: City object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/City'
      responses:
        405:
          description: Invalid input
  /api/cities/{id}:
    get:
      tags:
      - city
      summary: Find city by ID
      description: Returns a single city
      operationId: getCityById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of city to return
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/City'
        400:
          description: Invalid ID supplied
        404:
          description: City not found
    put:
      tags:
      - city
      summary: Update an existing city
      operationId: updateCity
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: ID of city to return
        required: true
        type: string
      - in: body
        name: body
        description: City object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/City'
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: City not found
        405:
          description: Validation exception
    delete:
      tags:
      - city
      summary: Deletes a city
      operationId: deleteCity
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: City id to delete
        required: true
        type: string
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: City not found
definitions:
  City:
    type: object
    required:
    - capital
    - name
    properties:
      id:
        type: string
      name:
        type: string
      country:
        type: string
      capital:
        type: boolean
      location:
        $ref: '#/definitions/City_location'
      lastModifiedDate:
        type: integer
        format: date
    xml:
      name: City
  Product:
    type: object
    required:
    - title
    properties:
      id:
        type: number
        format: int32
      title:
        type: string
      rate:
        type: integer
        format: int32
      price:
        type: integer
        format: int32
      description:
        type: boolean
      review:
        $ref: '#/definitions/Review'
      lastModifiedDate:
        type: integer
        format: date
    xml:
      name: Product
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      email:
        type: string
      login:
        type: string
    xml:
      name: User
  Review:
    type: object
    properties:
      id:
        type: integer
        format: int64
      review:
        type: string
      productId:
        type: integer
        format: int32
      userId:
        type: integer
        format: int32
    xml:
      name: Review
  City_location:
    properties:
      lat:
        type: integer
        format: int64
      long:
        type: integer
        format: int64
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
